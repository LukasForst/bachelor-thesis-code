/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

    dialect "java"

import org.optaplanner.core.api.score.buildin.simple.SimpleScoreHolder;
import pw.forst.olb.core.opta.domain.Assignment
import pw.forst.olb.core.opta.domain.Plan
import pw.forst.olb.core.opta.domain.Job
import pw.forst.olb.core.opta.domain.Time
import pw.forst.olb.core.opta.domain.ResourcesStack

global SimpleScoreHolder scoreHolder;

rule "max time not exceeded"
    when
        $job : Job($maxTime : maxTime)
        $plan : Plan(getTimeLengthForJob($job) > $maxTime)
    then
        scoreHolder.addConstraintMatch(kcontext, -1);
end

rule "no assignment"
    when
        $job : Job()
        not Assignment(job == $job)
    then
        scoreHolder.addConstraintMatch(kcontext, -1);
end

rule "assignment exist"
    when
        $job : Job()
        exists Assignment(job == $job)
    then
        scoreHolder.reward(kcontext);
end


// ############################################################################
// Hard constraints
// ############################################################################

//rule "requiredCpuPowerTotal"
//    when
//        $computer : CloudComputer($cpuPower : cpuPower)
//        accumulate(
//            CloudProcess(
//                computer == $computer,
//                $requiredCpuPower : requiredCpuPower);
//            $requiredCpuPowerTotal : sum($requiredCpuPower);
//            $requiredCpuPowerTotal > $cpuPower
//        )
//    then
//        scoreHolder.addHardConstraintMatch(kcontext, $cpuPower - $requiredCpuPowerTotal);
//end
//
//rule "requiredMemoryTotal"
//    when
//        $computer : CloudComputer($memory : memory)
//        accumulate(
//            CloudProcess(
//                computer == $computer,
//                $requiredMemory : requiredMemory);
//            $requiredMemoryTotal : sum($requiredMemory);
//            $requiredMemoryTotal > $memory
//        )
//    then
//        scoreHolder.addHardConstraintMatch(kcontext, $memory - $requiredMemoryTotal);
//end
//
//rule "requiredNetworkBandwidthTotal"
//    when
//        $computer : CloudComputer($networkBandwidth : networkBandwidth)
//        accumulate(
//            CloudProcess(
//                computer == $computer,
//                $requiredNetworkBandwidth : requiredNetworkBandwidth);
//            $requiredNetworkBandwidthTotal : sum($requiredNetworkBandwidth);
//            $requiredNetworkBandwidthTotal > $networkBandwidth
//        )
//    then
//        scoreHolder.addHardConstraintMatch(kcontext, $networkBandwidth - $requiredNetworkBandwidthTotal);
//end
//
//// ############################################################################
//// Soft constraints
//// ############################################################################
//
//rule "computerCost"
//    when
//        $computer : CloudComputer($cost : cost)
//        exists CloudProcess(computer == $computer)
//    then
//        scoreHolder.addSoftConstraintMatch(kcontext, - $cost);
//end
